import numpy as np
import matplotlib.pyplot as plt
import uncertainties as unc
import scipy.stats as stats
from scipy.interpolate import interp1d

import scipy.stats as stats
import uncertainties as unc

def average(arr):
    sem = np.std(arr, ddof=1) / np.sqrt(len(arr))
    coef = stats.t.ppf((1 + 0.99) / 2, len(arr) - 1)
    return unc.ufloat(np.mean(arr), sem*coef)


data1 = np.loadtxt('1.txt')
data2 = np.loadtxt('3.txt')
data3 = np.loadtxt('5.txt')

print(average(data1[:, 4]))
print(average(data2[:, 4]))
print(average(data3[:, 4]))

print(average(data1[:, 5]))
print(average(data2[:, 5]))
print(average(data3[:, 5]))

data1[:, 4]


phi1 = 0.90 * 1e-4
phi3 = 0.52 * 1e-4
phi5 = 0.34 * 1e-4

ter = np.array([
    [1, 0.90, 0.66, 9.61, 90, 3.816],
    [2, 0.68, 0.49, 7.26, 72, 3.849],
    [3, 0.52, 0.41, 6.04, 56, 3.838],
    [4, 0.42, 0.35, 5.02, 49, 3.787],
    [5, 0.34, 0.28, 4.22, 40, 3.882],
    [6, 0.27, 0.22, 3.29, 32, 3.867],
    [7, 0.21, 0.18, 2.72, 26, 3.887],
    [8, 0.16, 0.14, 2.16, 21, 3.928],
])

def average(arr):
    sem = np.std(arr, ddof=1) / np.sqrt(len(arr))
    coef = stats.t.ppf((1 + 0.9973) / 2, len(arr) - 1)
    return unc.ufloat(np.mean(arr), sem*coef)

u650 = np.loadtxt('650V.txt')
u750 = np.loadtxt('750V.txt')

#print(average(u600[:, 5]))
#print(average(u750[:, 5]))

ter1 = np.array([
    [1, 752, 0.73, 10.74, 96, 3.836, 53.714, -2.639, 149.200, 7.149, 1.067],
    [2, 730, 0.62, 8.26, 76, 3.650, 52.143, -2.659, 74.494, 11.336, 0.844],
    [3, 710, 0.51, 6.61, 58, 3.600, 50.714, -2.645, 61.435, 10.409, 0.644],
    [4, 692, 0.42, 5.30, 45, 3.552, 49.429, -2.633, 50.955, 9.813, 0.500],
    [5, 670, 0.31, 3.72, 31, 3.464, 47.857, -2.626, 35.832, 9.613, 0.344],
    [6, 650, 0.29, 3.22, 26, 3.332, 46.429, -2.634, 20.807, 13.884, 0.289],
    [7, 630, 0.25, 2.64, 20, 3.250, 45.000, -2.628, 14.644, 15.175, 0.222],
    [8, 610, 0.20, 1.94, 14, 3.115, 43.571, -2.638, 8.080, 19.252, 0.156],
    [9, 590, 0.16, 1.52, 11, 3.082, 42.143, -2.615, 6.983, 17.502, 0.122],
    [10, 572, 0.13, 1.12, 8, 2.935, 40.857, -2.633, 3.523, 25.230, 0.089],
])

ter2 = np.array([
    [1, 762, 0.72, 10.68, 98, 3.851, 54.429, -2.649, 158.005, 11.928, 1.885],
    [2, 741, 0.60, 8.51, 78, 3.766, 52.929, -2.643, 115.464, 12.991, 1.500],
    [3, 721, 0.51, 6.74, 60, 3.635, 51.500, -2.651, 70.409, 16.388, 1.154],
    [4, 701, 0.43, 5.45, 46, 3.560, 50.071, -2.644, 52.541, 16.837, 0.885],
    [5, 680, 0.35, 4.19, 35, 3.460, 48.571, -2.644, 35.240, 19.100, 0.673],
    [6, 662, 0.29, 3.31, 27, 3.378, 47.286, -2.642, 25.235, 20.576, 0.519],
    [7, 640, 0.23, 2.48, 20, 3.284, 45.714, -2.639, 16.946, 22.697, 0.385],
    [8, 622, 0.19, 2.00, 16, 3.244, 44.429, -2.617, 14.320, 21.487, 0.308],
    [9, 602, 0.15, 1.51, 11, 3.173, 43.000, -2.607, 10.476, 20.193, 0.212],
    [10, 581, 0.12, 1.10, 8, 3.028, 41.500, -2.618, 5.439, 28.288, 0.154],
])

ter3 = np.array([
    [1, 780, 0.67, 10.32, 97, 3.925, 55.714, -2.653, 205.700, 13.869, 2.853],
    [2, 762, 0.59, 8.67, 81, 3.833, 54.429, -2.653, 147.969, 16.100, 2.382],
    [3, 740, 0.49, 6.74, 61, 3.709, 52.857, -2.657, 93.164, 19.258, 1.794],
    [4, 721, 0.41, 5.53, 48, 3.673, 51.500, -2.641, 81.206, 17.385, 1.412],
    [5, 702, 0.35, 4.34, 38, 3.521, 50.143, -2.656, 45.077, 24.794, 1.118],
    [6, 682, 0.30, 3.50, 30, 3.416, 48.714, -2.658, 29.419, 29.993, 0.882],
    [7, 661, 0.24, 2.85, 24, 3.446, 47.214, -2.618, 33.299, 21.198, 0.706],
    [8, 642, 0.20, 2.13, 18, 3.263, 45.857, -2.643, 15.540, 34.068, 0.529],
    [9, 620, 0.16, 1.63, 13, 3.192, 44.286, -2.630, 11.389, 33.573, 0.382],
    [10, 600, 0.12, 1.18, 9, 3.136, 42.857, -2.615, 8.890, 29.775, 0.265],
])

#print(average(ter1[:, 3] / ter1[:, 4]))
#print(average(ter2[:, 3] / ter2[:, 4]))
#print(average(ter3[:, 3] / ter3[:, 4]))

osv1 = np.loadtxt('1.txt')
osv3 = np.loadtxt('3.txt')
osv5 = np.loadtxt('5.txt')

mu, sigma = average( osv1[:, 2] / osv1[:, 3] )
print( u650[:, 4] * np.random.normal(mu, sigma, len(u650)))

print(u650[:, 3] / u650[:, 5]**2)
print()

#print(average(osv1[:, 3] / (osv1[:, 4]**14 * phi1)))
#print(osv1[:, 3] / (osv1[:, 4]**14 * phi1))
#
#print(average(osv3[:, 3] / (osv3[:, 4]**14 * phi3)))
#print(osv3[:, 3] / (osv3[:, 4]**14 * phi3))
#
#print(average(osv5[:, 3] / (osv5[:, 4]**14 * phi5)))
#print(osv5[:, 3] / (osv5[:, 4]**14 * phi5))
#
#print(average(u750[:, 4] / (u750[:, 5]**14 * u750[:, 1])))
#print(u750[:, 4] / (u750[:, 5]**14 * u750[:, 1]))

print(average(u650[:, 4] / (u650[:, 5]**14 * u650[:, 1])))
print(u650[:, 4] / (u650[:, 5]**14 * u650[:, 1]))

#print(average(ter[:, 4] / (ter[:, 5]**14 * ter[:, 1])))

osv1_tab = np.array([len(osv1), 11])
osv1_tab[:, 0] = osv1[: 0] / 14


q = 1.60217663 * 1e-19

print(osv1[:, 0][:, None] / 14)
print(osv3[:, 0][:, None] / 14)
print(osv5[:, 0][:, None] / 14)

I10 = np.array([0.82, 0.63, 0.48, 0.38, 0.30, 0.24, 0.20, 0.21])
I12 = np.array([10.24, 7.93, 6.04, 4.81, 3.79, 3.11, 2.52, 1.98])

print( (I12 / I10)**0.5)

poloha1 = np.loadtxt('1.txt')

osv1_S = np.zeros([len(poloha1), 2])
osv1_S[:, 0] = poloha1[:, 0]
osv1_S[:, 1] = poloha1[:, 3] / phi1

def transform_S(osv, phi):
    osvn = ( osv - np.array([946, 704]) ) / np.array([4931 - 946, 3379 - 704])
    osvn = osvn * np.array([850 - 550, 3])  + np.array([550, 0])
    osvn[:, 1] *= phi
    return osvn

osv1_S_eps = np.array([
    1557, 803, 
    1730, 823, 
    1929, 843, 
    2009, 853, 
    2168, 882, 
    2274, 902, 
    2407, 942, 
    2553, 962, 
    2699, 1001, 
    2779, 1031, 
    2952, 1100, 
    3071, 1140, 
    3231, 1229, 
    3470, 1358, 
    3563, 1437, 
    3789, 1596, 
]).reshape(-1, 2)

osv2_S_eps = np.array([
    1956, 875, 
    2115, 893, 
    2221, 910, 
    2500, 1013, 
    2646, 1030, 
    2846, 1081, 
    3045, 1167, 
    3204, 1236, 
    3417, 1356, 
    3629, 1493, 
    3709, 1561, 
    3842, 1647, 
    4014, 1836, 
    4174, 2059, 
    4320, 2264, 
]).reshape(-1, 2)

osv5_S_eps = np.array([
    2327, 966,
    2474, 1019,
    2673, 1071,
    2846, 1124,
    3018, 1176,
    3217, 1281,
    3337, 1333,
    3510, 1438,
    3629, 1543,
    3802, 1648,
    3921, 1753,
    4028, 1858,
    4134, 1963,
    4240, 2068,
    4320, 2199,
    4386, 2278,
    4453, 2382,
    4586, 2592,
    4665, 2776,
    4745, 2907,
    4851, 3064,
]).reshape(-1, 2)

#print(transform_S(osv1_S_eps, phi1))
#print()
#print(transform_S(osv2_S_eps, phi3))
#print()
#print(transform_S(osv5_S_eps, phi5))
#print()

def transform_M(osv):
    osvn = ( osv - np.array([946, 704]) ) / np.array([4931 - 946, 3379 - 704])
    osvn = osvn * np.array([850 - 550, 300])  + np.array([550, 0])
    osvn[:, 1] = (osvn[:, 1] * 1e6)**(1/14)
    return osvn

osv1_M_eps = np.array([
    1557, 736,
    1730, 750,
    1929, 781,
    2009, 777,
    2168, 788,
    2274, 817,
    2407, 834,
    2553, 871,
    2699, 906,
    2779, 907,
    2952, 975,
    3071, 1011, 
    3231, 1107, 
    3470, 1264, 
    3563, 1302, 
    3789, 1471, 
]).reshape(-1, 2)

sigma = (poloha1[:, 2] / poloha1[:, 1])**0.5

osv1_M_new = transform_M(osv1_M_eps)


osv3_M_eps = np.array([
    1956, 788, 
    2115, 781, 
    2221, 786, 
    2500, 861, 
    2646, 867, 
    2846, 947, 
    3045, 1024, 
    3204, 1070, 
    3417, 1161, 
    3629, 1405, 
    3709, 1460, 
    3842, 1554, 
    4014, 1662, 
    4174, 1926, 
    4320, 2307, 
]).reshape(-1, 2)

osv5_M_eps = np.array([
    2327, 899,
    2474, 878,
    2673, 893,
    2846, 913,
    3018, 994,
    3217, 1061,
    3337, 1129,
    3510, 1329,
    3629, 1398,
    3802, 1628,
    3921, 1573,
    4028, 1730,
    4134, 1955,
    4240, 2154,
    4320, 2245,
    4386, 2245,
    4453, 2450,
    4586, 2550,
    4665, 2955,
    4745, 3078,
    4851, 3212,
]).reshape(-1, 2)

#print(transform_M(osv1_M_eps))
#print()
#print(transform_M(osv3_M_eps))
#print()
#print(transform_M(osv5_M_eps))

def transform_zes(zes):
    zesn = ( zes - np.array([726, 440]) ) / np.array([4205, 2939])
    zesn = zesn * np.array([0.00008, 3.8 - 3.2]) + np.array([0.00001, 3.2])
    zesn[:, 1] = zesn[:, 1]
    return zesn

zes650_eps = np.array([
    4931, 653,
    3722, 448,
    2934, 713,
    2408, 763,
    1987, 638,
    1620, 732,
    1304, 1256,
    1041, 863,
]).reshape(-1, 2)

zes750_eps = np.array([
    4931, 2854,
    3722, 2608,
    2934, 2629,
    2408, 2945,
    1987, 2686,
    1620, 2715,
    1304, 3052,
    1041, 2789,
]).reshape(-1, 2)


print(transform_zes(zes650_eps), '')
print()
print(transform_zes(zes750_eps), '')
print()


